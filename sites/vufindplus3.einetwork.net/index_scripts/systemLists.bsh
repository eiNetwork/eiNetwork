import org.marc4j.marc.Record;
import org.marc4j.marc.ControlField;
import org.marc4j.marc.DataField;

import java.util.*;
import java.io.*;
import java.util.regex.*;

/**
 * Determine the system lists to add the record to based on lists exported.
 *
 * @param  Record          record
 * @return String   Rating or null if not set.
 */
Hashtable listTitlesByRecord = null;
public Set getSystemLists(Record record, String configFile) {
    if (listTitlesByRecord == null){
    	loadTitlesByRecord(configFile);
    }
    DataField recordIdField = (DataField) record.getVariableField("950");
    String recordId = recordIdField.getSubfield('a').getData();
    if (listTitlesByRecord.containsKey(recordId)){
    	System.out.println("..In System Lists");
    	return listTitlesByRecord.get(recordId);
    }else{
    	return null;
    }
}

private void loadTitlesByRecord(String configFilename){
	System.out.println("Starting loadTitlesByRecord");
	listTitlesByRecord = new Hashtable();
	//Load all of the lists in the directory. 
	Properties props = new Properties();
	File configFile = new File(configFilename);
	System.out.println("configFile = " + configFile.getAbsolutePath());
	FileReader configFileReader = new FileReader(configFile);
	props.load(configFileReader);
	String configDirectory = props.getProperty("listDirectory");
	
	File listDirectory = new File(configDirectory);
	File[] filesToImport = listDirectory.listFiles(new FilenameFilter() {
		public boolean accept(File dir, String name) {
			return name.toLowerCase().endsWith("csv");
		}
	});
	
	if (filesToImport == null){
		System.out.println("Warning, no system lists found");
	}else{
		for (File fileToImport : filesToImport){
			loadTitlesFromFile(props, fileToImport);
		}
	}
}

private void loadTitlesFromFile(Properties props, File fileToImport){
	System.out.println("Loading titles from file " + fileToImport.getName());
	String shortName = fileToImport.getName().substring(0, fileToImport.getName().lastIndexOf('.'));
	String listName = props.getProperty(shortName);
	if (listName == null || listName.length() == 0){
		listName = shortName;
	}
	System.out.println("  List Name - " + listName);
	try {
		BufferedReader reader = new BufferedReader(new FileReader(fileToImport));
		String line = reader.readLine();
		int lineNumber = 0;
		while (line != null){
			if (lineNumber >= 2 && line.trim().length() > 0){
				//The line is not a header line
				//line format is Bib#|Collection|Call|Title|ISN
				String[] fields = line.split("\\|");
				if (fields.length > 0 && fields[0].length() > 0){
					String recordNumber = fields[0];
					Set titles;
					if (listTitlesByRecord.containsKey(recordNumber)){
						titles = listTitlesByRecord.get(recordNumber);
					}else{
						titles = new LinkedHashSet();
						listTitlesByRecord.put(recordNumber, titles);
					}
					titles.add(listName);
				}
			}
			lineNumber++;
			line = reader.readLine();
		}
		
	} catch (FileNotFoundException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (IOException e) {
		System.out.println("Unable to read line from file " + fileToImport.getName());
	}
}
